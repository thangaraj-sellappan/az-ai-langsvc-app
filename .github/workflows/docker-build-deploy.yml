name: Docker Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/**'
      - '.github/workflows/docker-build-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'server/**'
  workflow_dispatch:
    inputs:
      build:
        description: 'Build Docker image'
        required: false
        default: true
        type: boolean
      push:
        description: 'Push to registry'
        required: false
        default: false
        type: boolean
      deploy:
        description: 'Deploy to environment'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ${{ secrets.AZ_CONTAINER_REGISTRY }}
  IMAGE_NAME: az-ai-langsvc-app

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build != 'false' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZ_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZ_CONTAINER_REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name != 'pull_request' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'

      - name: Check if SARIF file exists
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "SARIF file found, size: $(wc -c < trivy-results.sarif) bytes"
          else
            echo "SARIF file not found"
            touch trivy-results.sarif
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  push:
    name: Push to Registry
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: ${{ (github.event.inputs.push == 'true' || github.event_name == 'push') && github.event_name != 'pull_request' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZ_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZ_CONTAINER_REGISTRY_PASSWORD }}

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ needs.build.outputs.image-tag }}
          cache-from: type=gha
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: ${{ (github.event.inputs.deploy == 'true' || github.event_name == 'push') && (github.event.inputs.environment == 'staging' || github.event.inputs.environment == '' || github.event_name == 'push') && github.event_name != 'pull_request' }}
    environment: staging
    
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add your staging deployment commands here
          # Example: kubectl set image deployment/app-deployment app=${{ needs.build.outputs.image-tag }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, push]
    if: ${{ github.event.inputs.deploy == 'true' && github.event.inputs.environment == 'production' && github.event_name != 'pull_request' }}
    environment: production
    
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/app-deployment app=${{ needs.build.outputs.image-tag }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build, security-scan, push, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "All stages completed successfully!"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "One or more stages failed!"
          echo "Check the workflow logs for details." 